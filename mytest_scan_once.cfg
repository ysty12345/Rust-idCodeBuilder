Program -> DeclList | None
DeclList -> Decl DeclList | Decl
Decl -> FunctionDecl
FunctionDecl -> FunctionHeader Block
FunctionHeader -> fn identifier ( ParamList ) | fn identifier ( ParamList ) -> Type
ParamList -> Param ParamListTail | None
ParamListTail -> , Param ParamListTail | None
Param -> VarDeclInner : Type
VarDeclInner -> mut identifier
Block -> { StmtList }
StmtList -> Stmt StmtList | None

Stmt -> LoopStmt | IfStmt | DeclOnly | DeclAssign | AssignStmt | ExprStmt | ReturnStmt | BreakStmt | ContinueStmt | ;

#############################################################################
LoopStmt -> WhileStmt

WhileStmt → while M1 BoolExpr M2 Block
{
    backpatch(Block.nextlist, M1.quad);             // Block 结束 → 判断处
    backpatch(BoolExpr.truelist, M2.quad);              // true → 循环体 Block
    WhileStmt.nextlist = BoolExpr.falselist;            // false → 循环结束
    emit("j", "-", "-", M1.quad);                   // 循环体跳回开头
}

IfStmt → if BoolExpr M Block
{
    backpatch(BoolExpr.truelist, M.quad);              // 条件为 true → 进入 if 块
    IfStmt.nextlist = merge(BoolExpr.falselist, Block.nextlist);      // 条件为 false 或 if块结束 → 跳转到 if 之后
}

IfStmt → if BoolExpr M1 Block N M2 ElsePart
{
    backpatch(BoolExpr.truelist, M1.quad);              // 条件为 true → 进入 if 块
    backpatch(BoolExpr.falselist, M2.quad);              // 条件为 false → 跳转到 else
    IfStmt.nextlist = merge(Block.nextlist, N.nextlist, ElsePart.nextlist);
}


ElsePart → else IfStmt
{
    ElsePart.nextlist = IfStmt.nextlist;
}

ElsePart → else Block
{
    ElsePart.nextlist = Block.nextlist;
}
#############################################################################
#############################################################################
BoolElement -> integer_constant | identifier | ( BoolElement )
BoolExpr -> BoolElement |  BoolElement CmpOp BoolElement

BoolElement → integer_constant | identifier
{
    BoolElement.id = integer_constant | identifier;
}

BoolElement → ( BoolElement1 )
{
    BoolElement.id = BoolElement1.id;
}

BoolExpr -> BoolElement
{
    BoolExpr.truelist = makelist(nextquad);
    BoolExpr.falselist = makelist(nextquad + 1);
    emit("jnz", BoolElement.id, "-", 0);
    emit("j", "-", "-", 0);
}

BoolExpr → BoolElement1 CmpOp BoolElement2
{
    BoolExpr.truelist = makelist(nextquad);
    BoolExpr.falselist = makelist(nextquad + 1);
    emit("j CmpOp", BoolElement1.id, BoolElement1.id, 0);
    emit("j", "-", "-", 0);
}
#############################################################################


DeclOnly -> let VarDeclInner : Type ; | let VarDeclInner ;
DeclAssign -> let VarDeclInner : Type = Expr ; | let VarDeclInner = Expr ;
AssignStmt -> Lvalue = Expr ;
ExprStmt -> Expr ;
ReturnStmt -> return ; | return Expr ;
BreakStmt -> break ;
ContinueStmt -> continue ;

Lvalue -> identifier

Expr -> Expr CmpOp AddExpr | AddExpr
AddExpr -> AddExpr AddOp Term | Term
Term -> Term MulOp Factor | Factor
Factor -> Element
Element -> integer_constant | identifier | ( Expr ) | identifier ( ArgList )
ArgList -> Expr ArgListTail | None
ArgListTail -> , Expr ArgListTail | None

CmpOp -> < | <= | > | >= | == | !=
AddOp -> + | -
MulOp -> * | /

Type -> i32
None -> epsilon

